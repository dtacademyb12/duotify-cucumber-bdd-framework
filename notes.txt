BDD - (Behavior Driven Development) - set of practices that facilitate the communication between technical and non-technical memebers
      through feature files and scenarios written in plain english using Gherkin syntax


Steps to create Cucumber BDD framework:

1. Create a new Maven project and add the following cucumber dependencies and any other required ones:
     <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>7.14.0</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>7.14.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-core</artifactId>
            <version>7.14.0</version>
        </dependency>
2. Create framework package structure: pages, runners, stepDefinitions, utils in src/test/java, features in src/test/resources
3. Add necessary utility classes, .gitignore, .properties file
4. Add a new feature file that represents a single feature, this usually corresponds to a user story
5. Add scenarios in the feature file that correspond to a test case.
6. Add a runner class that runs the scenarios. This class is typically an empty class annotrated with @RunWith(Cucumber.class)
   The runner class needs to have the minimum configurations for the location of features files and step definition files with @CucumberOptions
  @CucumberOptions (
          features = "src/test/resources/features", // path where feature files are located
          glue = "stepDefinitions" // path where step definitions are located
  )
7. Run the specific scenario. When you run the scenario the first time, Cucumber generates a step definition snippets for each unimplemented step.
    To run the specific scenario, we need to add a tag on the sceanrio, and mention the tag in @CucumberOptions
8. Add the generated step definition snippets into a specific Step definition class in stepdefinitions folder and implement the actual logic for each step.
9. Re-Run the scenario and verify the correctness




Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps

Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
             The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class
  - Cucumber offers 3 types of Hooks: @BeforeAll, @AfterAll, @Before, @After, @BeforeStep, @AfterStep

How Cucumber Background is different from Hook?
1. Purpose: Hook is used for configuration logic whereas Background is used for test logic
2. Scope: Hook is applicable to all scenarios whereas Background is applicable only to scenarios within a single feature file



Reporting in Cucumber Framework
- Cucumber comes with its own built-in HTML report. To enable it, we need to add the HTML plugin with the path to the file in @CucumberOptions
   e.g    plugin = {"html:target/basic-report/report.html"}

How did you implement taking a screenshot on failure in Cucumber?
- In @After hook, we used Scenario class and checked if scenario is failed, and took a screenshot with Selenium and attached the scrrenshot file with Scenario class's attach method.
  e.g. public void tearDownScenario(Scenario scenario){
          if(scenario.isFailed()){
              scenario.attach(((TakesScreenshot) Driver.getDriver()).getScreenshotAs(OutputType.BYTES), "image/png", "screenshot");
          }
    }



How do you run your scenarios through CMD in Cucumber framework?
- Using Maven Surefire plugin and mvn test command
    e.g.
    <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.0.0</version>
                        <configuration>
                           <includes>
                               <include>CucumberRunner.java</include>
                           </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>



How to run scenarios with specific tag/s through CMD in Cucumber?

mvn test -D cucumber.filter.tags="@positive"
mvn test -D cucumber.filter.tags="@positive and @smoke"
mvn test -D cucumber.filter.tags="@positive or @smoke"

When you pass the tags through CMD with -D cucumber.filter.tags, it will override the Runner class's tags.


Lombok is used to reduce boilerplate code for classes, e.g., it can generate getters and setters for those objects automatically by using Lombok annotations.
The easiest way is to use the @Data annotation.
In our Framework we used Lombok annotation @Data for our Page classes to automatically generate getter methods to be accessible outside in our Test code.


DocString

If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """


What cucumber exceptions do you know?

UndefinedStepException - when a scenario step is unimplemented
PendingException - default exception added to each snippet
DuplicateStepDefinitionException - when there are more than one exactly matching step definitions for a single step
AmbiguousStepDefinitionsException - when there are more than one matching step definitions due to cucumber expressions ambiguity
CucumberException - when cucumber can not convert datatable to a corresponding java type indicated in step def argument
 Example:
 And I want to buy "socks" -> matches the following step defs:
                     @And("I want to buy {string}")
                     @And("I want to buy {word}")


Cucumber Data Table - a cucumber feature that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                                into the step definition method

             Example:           Given I am on homepage
                                When I pass this information
                                | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |

              The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
              Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
               Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long

           When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
           unmodifiable versions of these data structures.
           If you need to modify, you need to convert into a modifiable type.


What is the difference between Cucumber Data Table and Scenario Outline's Examples table?

Data Table belongs to a single step of a scenario whereas Examples table belongs to the entire Scenario Outline.
We use Data Table when we want to pass table-style data (multiple sets of data) into a single step.
We use Examples table with Cucumber Scenario Outline when we want to run the same scenario multiple times with different input.


Cucumber comes with built-in Junit 4 by default and it does not have soft assertions.
Hence we can use AssertJ library to implement soft assertions:
           Ex:
                SoftAssertions softAssertions = new SoftAssertions();
                softAssertions.assertThat("actual").isEqualTo("expected");
                softAssertions.assertThat("actual2").isEqualTo("expected2");
                softAssertions.assertThat("actual3").isEqualTo("expected3");
                softAssertions.assertAll();


Cross-Browser Tests

In Cucumber framework, cross-browser tests enable running tests in multiple browsers to ensure browser compatibility.
Besides, we will have a need to run our tests in headless mode in CI servers like Jenkins or GitHub Actions.

How did you implement it?
We pass the name of the browser through command line when running tests:
mvn test -D cucumber.filter.tags="@smoke" -D browser=chromeheadless


Parallel tests

 We can enable parallel tests in Cucumber natively with JUnit 4.

 But we need to remember that with this option you can run only FEATURES in parallel.

  If there is a need for running SCENARIOS in parallel, you can incorporate TestNG , but that requires extra configuration and setup.


               Steps to implement running parallel Features in Cucumber with Junit:

                1.Give the scope of the feature files that you want to run in parallel in your runner class
                     features = "src/test/resources"
                  Optionally create a separate folder for feature files that you want to run in parallel and indicate that path
                        features = "src/test/resources/parallel"

                2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                       <parallel>methods</parallel>
                       <useUnlimitedThreads>true</useUnlimitedThreads>

                3. If you want to limit the threads:
                  <parallel>methods</parallel>
                   <threadCount>6</threadCount>

                4. Run the tests thru command line with mvn test command


Tell me about your Cucumber BDD framework?


  General description -> components -> architecture -> more details (packages, classes)


  My framework is a Cucumber BDD test automation framework allows us to write test cases in Gherkin format
  as Cucumber scenarios which is understandable to all participants.
  The framework tech stack includes Java, Cucumber, Gherkin, JUnit, Selenium, Maven, Faker, Lombok, AssertJ.
  My framework is built with using Page Object Model design pattern for easy maintenance and scalability.
  Besides, I also used Page Factory pattern for my page classes and Singleton pattern for my Driver class.
  My framework structure consists of packages for page classes, runner classes, step definition classes and hooks, utilities and features files.
  In my framework the cucumber feature files are connected to the step definition classes through a runner class where all test run configuration is added.


  Cucumber BDD Framework components:

    Java - programming language to write code
    Selenium - to automate UI scenarios
    Junit - organize, configure, and execute tests
    Maven/Surefire - define the project structure, manage dependencies, run tests through command line
    Faker - generate mock data for data driven testing
    Lombok - generate getter and setters automatically for page classes
    AssertJ - enable soft assertions since Junit does not offer them
    .gitignore file - to exclude non-project related files from being version controlled (tracked and pushed to GitHub)
    config.properties file - to store project's global variables such as env variables, usernames, passwords, paths, etc.
    Utility Classes - classes that support our automated tests
    Reports - are implemented with Cucumber's own built in HTML report plugin

  Architecture:
         -Design patterns used: Page Object Model and Page Factory, Singleton
         -OOP Principles used:
         - Encapsulation - I used it my page classes by making webelements private and provide public getters
         - Inheritance - I used it in my page classes by creating a parent class and adding all common webelements there and extending subclasses from that super class
         - I haven't implemented Abstraction or Polymorphism in any of my code since I had no need for them.
          But I can give you examples of them in my framework code.
           Polymorphism ->  WebDriver driver = new ChromeDriver()
           Abstraction -> WebDriver, WebElement, Alert, JavaScriptExecutor, TakesScreenshot

    Types of tests the framework supports:
      Functional,
      Smoke,
      Regression,
      Integration,
      UI, API, DB
      Cross Browser,
      Headless,
      Parallel,
      Data-Driven tests
      End-to-end tests



      Sharing data between Cucumber steps:

          Sharing data between cucumber step definition methods in the same or different class is a common challenge in Cucumber framework.

          a) If the step definition methods are in the same class, you can simply share them as instance variables by taking the shared variable to the class level:

              String name; //shared variable

              @Given("This step declares some data")
              public void thisStepDeclaresSomeData() {
                  name = "Hello"; // this step initializes it
                  System.out.println("First step");
              }

              @When("This step will access the first steps data")
              public void thisStepWillAccessTheFirstStepsData() {

                  System.out.println("Second step accessing the first step's name variable");
                  System.out.println(name); // this step accesses
              }




          b) For sharing data between cucumber step definition methods in the same or different classes for scalable approach
              we can use Cucumber pico container dependency for that purpose and use Dependency Injection(DI) concept.

              Dependency Injection - declare one class as instance variable of another class and initialize it in a constructor.
              (HAS-A relationship)
              class Engine{}

              class Car {
                 Engine engine;

                 public Car(Engine engine){
                   this.engine = engine;
                 }
              }



          Steps:
          1. Add the cucumber-picocontainer dependency:
                    <dependency>
                         <groupId>io.cucumber</groupId>
                         <artifactId>cucumber-picocontainer</artifactId>
                         <version>7.13.0</version>
                     </dependency>
          2. Create a common class for shared data and add the variables there with getters and setters (optionally use @Data annotation from Lombok)
               @Data
               public class SharedData {

                   private String password;
                   private String username;

               }

          3. In a Step definition class add an object of SharedData class as instance variable and initialize it in a constructor:

              public class ExampleStepDefs {
                 SharedData sharedData;

                   public ExampleStepDefs(SharedData sharedData){
                      this.sharedData = sharedData;
                   }
              }

          4. Use setters and getters in a step defintion methods to set and get the shared data:

               @Given("I enter random valid username and password")
                  public void i_enter_random_valid_username_and_password() {

                      sharedData.setPassword(new Faker().internet().password());  //initialize the password

                      Driver.getDriver().finsElement(By.xpath("passwordField")).sendKeys(sharedData.getPassword()); // use it

                  }

          5. Share the data in the same or different step definition class's method with getter:

             @Then("I should have the same username and password in the database")
                 public void i_should_have_the_same_username_and_password_in_the_database() {
                   String dbUsername =   DBUtils.get("some SQL");
                    Assert.assertEquals(sharedData.getUsername(), dbUsername); //sharedData.getUsername() is the shared data that is initialized in the other step

                 }






          CI(Continuous integration)/CD(Continuous Delivery) - Set of practices where a code is continuously integrated and tested as the project progresses, and new code is added and the application deployment process is automated

          CI/CD can be implemented through such tools as Jenkins, TravisCI, GitLab, GitHub Actions

          Regardless of which tool you use, a typical CI/CD pipeline consists of "JOBS" that are collection of steps (which are command line commands typically written in some scripting language like YAML, Groovy) that aree executed
          either when a specific event (push, pull request, merge) happens or on a specific schedule (e.g daily at midnight, every Saturday at 2 am)


          GitHub Actions is a CI/CD tool that enables setting up complex CI/CD pipelines right within the GitHub repository
          Advantages:
            - it is already integrated into GitHub
            - it is free for general public
            - No need to set up complex virtual machines in the cloud, GitHub action provides built-in Linux,Windows and MacOS virtual machine s that require


          To implement CI in our test automation framework:

          1. Create a folder called .github/workflows in the project folder
             where we can store our CI jobs called "Workflows"
          2. Add a YAML workflow file with an extension .yml that contains the CI steps


